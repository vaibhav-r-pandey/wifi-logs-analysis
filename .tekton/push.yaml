<<<<<<< HEAD
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: wifi-logs-analysis-push
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
spec:
  pipelineRef:
    name: python-build-deploy
  params:
    - name: APP_NAME
      value: wifi-logs-analysis
    - name: SOURCE_URL
      value: https://github.com/vaibhav-r-pandey/wifi-logs-analysis.git
    - name: SOURCE_REVISION
      value: main
    - name: PYTHON_VERSION
      value: "3.10"
    - name: BUILD_ARGS
      value: |
        --build-arg PYTHON_VERSION=3.10
    - name: ENV_VARS
      value: |
        GPT4IFX_USERNAME=$(params.GPT4IFX_USERNAME)
        GPT4IFX_PASSWORD=$(params.GPT4IFX_PASSWORD)
        FLASK_ENV=production
    - name: START_COMMAND
      value: "python3 app.py"
    - name: PORT
      value: "5000"
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
=======
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: docker-build-and-deploy-pr
spec:
  params:
    - name: IMAGE_NAME
      type: string
    - name: GIT_REPO
      type: string
    - name: GIT_REVISION
      type: string
  workspaces:
    - name: workspace
  tasks:
    - name: fetch-repository
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: git-clone
        - name: namespace
          value: openshift-pipelines
      workspaces:
        - name: output
          workspace: workspace
      params:
        - name: URL
          value: $(params.GIT_REPO)
        - name: REVISION
          value: $(params.GIT_REVISION)
        - name: SUBDIRECTORY
          value: ""
        - name: DELETE_EXISTING
          value: "true"

    - name: build
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: buildah
        - name: namespace
          value: openshift-pipelines
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: workspace
      params:
        - name: IMAGE
          value: $(params.IMAGE_NAME)
        - name: TLS_VERIFY
          value: "false"

    - name: deploy
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: openshift-client
        - name: namespace
          value: openshift-pipelines
      runAfter:
        - build
      params:
      - name: SCRIPT
        value: |
          oc new-app --docker-image $(params.IMAGE_NAME)
>>>>>>> b51a4ae8cb72908ebfebb59f6d1313c498ba2170
